package app.tests;

// Importa las clases necesarias del dominio, servicio y utilidades
import app.domain.Combo;
import app.domain.OrdenDeCompra;
import app.domain.promo.Promocion;
import app.service.CheckoutService;
import app.service.util.Input;
import app.service.util.Validate;

import java.util.List;

public class TestCombosPromos {

    public static void main(String[] args) {
        // Crea el servicio de checkout y la orden de compra vac√≠a
        CheckoutService checkout = new CheckoutService();
        OrdenDeCompra orden = new OrdenDeCompra();

        // Variables de control para el flujo del men√∫
        boolean finalizarCompra = false;
        boolean comboElegido = false;
        boolean promoElegida = false;

        // Bucle principal del men√∫
        while (!finalizarCompra) {
            // Muestra las opciones disponibles
            System.out.println("\n=== MEN√ö PRINCIPAL ===");
            System.out.println("1. Elegir combo");
            System.out.println("2. Elegir promoci√≥n");
            System.out.println("3. Ver selecci√≥n actual");
            System.out.println("0. Finalizar compra");

            // Lee la opci√≥n del usuario
            int opcion = Input.leerEntero("Seleccione una opci√≥n");

            // Ejecuta la acci√≥n correspondiente seg√∫n la opci√≥n elegida
            switch (opcion) {
                case 1 -> {
                    // Permite elegir un combo y marca que ya se eligi√≥
                    elegirCombo(orden, checkout);
                    comboElegido = true;
                }
                case 2 -> {
                    // Solo permite elegir promoci√≥n si ya se eligi√≥ combo
                    if (!comboElegido) {
                        System.out.println("‚ö†Ô∏è Primero debe elegir un combo antes de seleccionar una promoci√≥n.");
                    } else {
                        elegirPromocion(orden, checkout);
                        promoElegida = true;
                    }
                }
                case 3 -> {
                    // Muestra la selecci√≥n actual si ya se eligi√≥ combo y promoci√≥n
                    if (!comboElegido) {
                        System.out.println("‚ö†Ô∏è Primero debe elegir un combo.");
                    } else if (!promoElegida) {
                        System.out.println("‚ö†Ô∏è Primero debe elegir una promoci√≥n.");
                    } else {
                        mostrarSeleccion(orden);
                    }
                }
                case 0 -> finalizarCompra = true; // Sale del men√∫
                default -> System.out.println("‚ö†Ô∏è Opci√≥n inv√°lida."); // Maneja entradas incorrectas
            }
        }

        // Mensaje final de despedida
        System.out.println("üëã Gracias por venir a Cine Los Idos!");
    }

    // M√©todo para mostrar y seleccionar un combo
    private static void elegirCombo(OrdenDeCompra orden, CheckoutService checkout) {
        List<Combo> combos = checkout.combosDisponibles(); // Obtiene la lista de combos
        System.out.println("\n=== COMBOS DISPONIBLES ===");
        for (int i = 0; i < combos.size(); i++) {
            System.out.println((i + 1) + ". " + combos.get(i)); // Muestra cada combo con √≠ndice
        }

        int opcion = Input.leerEntero("Seleccione un combo"); // Lee la opci√≥n del usuario
        if (Validate.rangoEntero(opcion, 1, combos.size())) {
            // Si la opci√≥n es v√°lida, asigna el combo a la orden
            checkout.elegirCombo(orden, combos.get(opcion - 1));
            System.out.println("‚úÖ Combo seleccionado: " + combos.get(opcion - 1));
        } else {
            System.out.println("‚ö†Ô∏è Opci√≥n inv√°lida."); // Maneja selecci√≥n fuera de rango
        }
    }

    // M√©todo para mostrar y seleccionar una promoci√≥n
    private static void elegirPromocion(OrdenDeCompra orden, CheckoutService checkout) {
        List<Promocion> promos = checkout.promocionesDisponibles(); // Obtiene la lista de promociones
        System.out.println("\n=== PROMOCIONES DISPONIBLES ===");
        for (int i = 0; i < promos.size(); i++) {
            System.out.println((i + 1) + ". " + promos.get(i).getNombre()); // Muestra cada promoci√≥n con √≠ndice
        }

        int opcion = Input.leerEntero("Seleccione una promoci√≥n"); // Lee la opci√≥n del usuario
        if (Validate.rangoEntero(opcion, 1, promos.size())) {
            // Si la opci√≥n es v√°lida, asigna la promoci√≥n a la orden
            checkout.elegirPromocion(orden, promos.get(opcion - 1));
            System.out.println("‚úÖ Promoci√≥n seleccionada: " + promos.get(opcion - 1).getNombre());
        } else {
            System.out.println("‚ö†Ô∏è Opci√≥n inv√°lida."); // Maneja selecci√≥n fuera de rango
        }
    }

    // Muestra la selecci√≥n actual del usuario (combo y promoci√≥n)
    private static void mostrarSeleccion(OrdenDeCompra orden) {
        System.out.println("\n=== SELECCI√ìN ACTUAL ===");
        System.out.println("Combo: " + (orden.getCombo() != null ? orden.getCombo() : "Ninguno"));
        System.out.println("Promoci√≥n: " + (orden.getPromocion() != null ? orden.getPromocion().getNombre() : "Sin Promo"));
    }
}